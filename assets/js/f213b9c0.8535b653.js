"use strict";(self.webpackChunkdhs_docs=self.webpackChunkdhs_docs||[]).push([[961],{8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>l});var r=s(6540);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}},9576:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"setups/additional-setup","title":"Additional Setup","description":"---","source":"@site/docs/setups/additional-setup.md","sourceDirName":"setups","slug":"/setups/additional-setup","permalink":"/DHS-Documentation/docs/setups/additional-setup","draft":false,"unlisted":false,"editUrl":"https://github.com/Prashu7487/DHS-Documentation/edit/main/docs/setups/additional-setup.md","tags":[],"version":"current","lastUpdatedBy":"Prashu7487","lastUpdatedAt":1744619278000,"frontMatter":{},"sidebar":"docs","previous":{"title":"AWS Integration","permalink":"/DHS-Documentation/docs/setups/aws"},"next":{"title":"Will update later","permalink":"/DHS-Documentation/docs/operations/service-management"}}');var t=s(4848),o=s(8453);const i={},l="Additional Setup",a={},c=[{value:"\ud83d\udda5\ufe0f Check System Resources",id:"\ufe0f-check-system-resources",level:2},{value:"\ud83d\udd52 Sync System Time",id:"-sync-system-time",level:2},{value:"\ud83d\ude80 Bash Scripts to Start and Stop All Hadoop &amp; Spark Services at Once",id:"-bash-scripts-to-start-and-stop-all-hadoop--spark-services-at-once",level:2},{value:"\ud83d\udccd First, navigate to your home directory:",id:"-first-navigate-to-your-home-directory",level:2},{value:"\ud83d\udd3c 1. <code>start-services.sh</code> \u2014 Start All Services",id:"-1-start-servicessh--start-all-services",level:3},{value:"\ud83d\udd3d 2. stop-services.sh \u2014 Stop All Services",id:"-2-stop-servicessh--stop-all-services",level:3},{value:"\ud83d\udcdd Script to forward ports from instance to localhost",id:"-script-to-forward-ports-from-instance-to-localhost",level:2},{value:"1. For Windows",id:"1-for-windows",level:3},{value:"2. For Linux",id:"2-for-linux",level:3},{value:"Notes",id:"notes",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"additional-setup",children:"Additional Setup"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:""}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-check-system-resources",children:"\ud83d\udda5\ufe0f Check System Resources"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"free -m     # \ud83d\udce6 Total RAM in MB\r\nnproc       # \ud83e\udde0 Number of vCPUs\r\ntop         # \ud83d\udcca Real-time system processes and usage\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-sync-system-time",children:"\ud83d\udd52 Sync System Time"}),"\n",(0,t.jsx)(n.p,{children:"\u26d4 Hadoop and Spark services may fail if the system time across the cluster is not properly synced."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install/configure NTP (Ubuntu)\r\nsudo apt install chrony\r\nsudo systemctl enable chrony\r\nsudo systemctl restart chrony\r\n\r\n# Force sync\r\nsudo chronyc -a makestep\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-bash-scripts-to-start-and-stop-all-hadoop--spark-services-at-once",children:"\ud83d\ude80 Bash Scripts to Start and Stop All Hadoop & Spark Services at Once"}),"\n",(0,t.jsx)(n.p,{children:"You can automate the process of starting and stopping Hadoop and Spark services using simple shell scripts."}),"\n",(0,t.jsx)(n.h2,{id:"-first-navigate-to-your-home-directory",children:"\ud83d\udccd First, navigate to your home directory:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cd ~\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"-1-start-servicessh--start-all-services",children:["\ud83d\udd3c 1. ",(0,t.jsx)(n.code,{children:"start-services.sh"})," \u2014 Start All Services"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"create the script"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nano start-services.sh\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Paste the following code into the editor (adjust paths according to your installation):"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\necho "Starting hadoop and spark services"\r\n\r\nhadoop/hadoop-3.4.1/sbin/start-all.sh\r\n\r\nspark/spark-3.5.5-bin-hadoop3/sbin/start-all.sh\r\n\r\necho "Started hadoop and spark services"\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"make the script executable:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chmod +x ./start-services.sh\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Run the script to start services:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./start-services.sh\n"})}),"\n",(0,t.jsx)(n.h3,{id:"-2-stop-servicessh--stop-all-services",children:"\ud83d\udd3d 2. stop-services.sh \u2014 Stop All Services"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"create the script"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"nano stop-services.sh\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Paste the following code into the editor (adjust paths according to your installation):"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n\r\necho "Stopping hadoop and spark services"\r\n\r\nhadoop/hadoop-3.4.1/sbin/stop-all.sh\r\n\r\nspark/spark-3.5.5-bin-hadoop3/sbin/stop-all.sh\r\n\r\necho "Stopped hadoop and spark services"\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"make the script executable:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"chmod +x ./stop-services.sh\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Run the script to stop services:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./stop-services.sh\n"})}),"\n",(0,t.jsx)(n.h2,{id:"-script-to-forward-ports-from-instance-to-localhost",children:"\ud83d\udcdd Script to forward ports from instance to localhost"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," Include frontend/backend ports if needed so"]}),"\n",(0,t.jsx)(n.h3,{id:"1-for-windows",children:"1. For Windows"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["paste this code in a text file then save that as ",(0,t.jsx)(n.code,{children:".bat"})," file, then click this file to execute"]}),"\n",(0,t.jsxs)(n.li,{children:["for clean up issues ",(0,t.jsx)(n.code,{children:"taskkill /F /IM ssh.exe"})," manually on cmd"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'@echo off\r\nREM ----------------------------------------------------------------\r\nREM SSH Port Forwarding Script\r\nREM ----------------------------------------------------------------\r\nsetlocal enabledelayedexpansion\r\n\r\n:INIT\r\nREM 1. Validate SSH key exists\r\nif not exist "fed.pem" (\r\n    echo [ERROR] Missing SSH key: fed.pem\r\n    timeout /t 3 >nul\r\n    exit /b 1\r\n)\r\n\r\nREM 2. Get target host with validation\r\n:GET_HOST\r\nset "REMOTE="\r\nset /p "REMOTE=Enter EC2 hostname (user@host): "\r\nif not defined REMOTE (\r\n    echo [ERROR] No host specified\r\n    timeout /t 2 >nul\r\n    goto GET_HOST\r\n)\r\n\r\nREM 3. Establish SSH tunnels with connection verification\r\necho [STATUS] Initializing SSH tunnels to %REMOTE%...\r\nstart "" /B ssh -i fed.pem -N -o ExitOnForwardFailure=yes ^\r\n-L 9870:localhost:9870 ^\r\n-L 9864:localhost:9864 ^\r\n-L 9868:localhost:9868 ^\r\n-L 19888:localhost:19888 ^\r\n-L 8088:localhost:8088 ^\r\n-L 8042:localhost:8042 ^\r\n-L 8188:localhost:8188 ^\r\n-L 4040:localhost:4040 ^\r\n-L 8080:localhost:8080 ^\r\n-L 8081:localhost:8081 ^\r\n-L 18080:localhost:18080 %REMOTE%\r\n\r\nREM Verify tunnel establishment\r\necho [STATUS] Verifying connection (10s timeout)...\r\nset "CONNECTED=false"\r\nfor /l %%i in (1,1,10) do (\r\n    timeout /t 1 >nul\r\n    tasklist | find /i "ssh.exe" >nul && (\r\n        set "CONNECTED=true"\r\n        goto CONNECTION_CHECK_DONE\r\n    )\r\n)\r\n:CONNECTION_CHECK_DONE\r\n\r\nif "!CONNECTED!" neq "true" (\r\n    echo [ERROR] Failed to establish SSH connection\r\n    call :CLEANUP\r\n    timeout /t 3 >nul\r\n    exit /b 1\r\n)\r\n\r\necho [SUCCESS] Tunnels active: http://localhost:[PORT]\r\necho [CONTROL] Type \'stop\' to terminate or \'status\' to check tunnels\r\n\r\nREM 4. Main control loop\r\n:CONTROL_LOOP\r\nset "CMD="\r\nset /p "CMD=Command: "\r\nif /i "!CMD!"=="stop" (\r\n    call :CLEANUP\r\n    exit /b 0\r\n) else if /i "!CMD!"=="status" (\r\n    tasklist | find /i "ssh.exe" >nul && (\r\n        echo [STATUS] Tunnels active\r\n    ) || (\r\n        echo [STATUS] Tunnels inactive\r\n    )\r\n    goto CONTROL_LOOP\r\n) else (\r\n    echo [HELP] Valid commands: stop, status\r\n    goto CONTROL_LOOP\r\n)\r\n\r\nREM 5. Cleanup procedure\r\n:CLEANUP\r\necho [STATUS] Terminating SSH processes...\r\ntaskkill /IM ssh.exe /F >nul 2>&1\r\ntimeout /t 1 >nul\r\n\r\nREM Verify termination\r\ntasklist | find /i "ssh.exe" >nul && (\r\n    echo [WARNING] Some tunnels still active - retrying...\r\n    taskkill /IM ssh.exe /F >nul 2>&1\r\n    timeout /t 1 >nul\r\n)\r\n\r\ntasklist | find /i "ssh.exe" >nul && (\r\n    echo [ERROR] Failed to terminate all tunnels\r\n    exit /b 1\r\n) || (\r\n    echo [SUCCESS] All tunnels closed\r\n    exit /b 0\r\n)\r\n\r\nendlocal\r\n\r\n\r\nREM----------------------------------\r\nREM include below ports in above list if needed\r\nREM -L 8000:localhost:8000 -L 9090:localhost:9090 -L 5173:localhost:5173 -L 5174:localhost:5174\r\nREM-----------------------------------\r\n\r\nREM ------------------------------------\r\nREM these commands to kill these process from linux/wsl\r\nREM get process listening on:\r\nREM\tps aux | grep \'[s]sh -i fed.pem\'\r\nREM Kill these at once-\r\nREM\tpkill -f "ssh -i fed.pem"\r\nREM -----------------------------\n'})}),"\n",(0,t.jsx)(n.h3,{id:"2-for-linux",children:"2. For Linux"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\r\n# ----------------------------------------------------------------\r\n# SSH Port Forwarding Script\r\n# ----------------------------------------------------------------\r\n\r\n#----------------------------------\r\n# include below ports in above list if needed\r\n# -L 8000:localhost:8000 -L 9090:localhost:9090 -L 5173:localhost:5173 -L 5174:localhost:5174\r\n#-----------------------------------\r\n\r\n# Initialize variables\r\nREMOTE_HOST=""\r\nSSH_PORTS=(\r\n    -L 9870:localhost:9870\r\n    -L 9864:localhost:9864\r\n    -L 9868:localhost:9868\r\n    -L 19888:localhost:19888\r\n    -L 8088:localhost:8088\r\n    -L 8042:localhost:8042\r\n    -L 8188:localhost:8188\r\n    -L 4040:localhost:4040\r\n    -L 8080:localhost:8080\r\n    -L 8081:localhost:8081\r\n    -L 18080:localhost:18080\r\n)\r\n\r\ncleanup() {\r\n    echo "[STATUS] Terminating SSH processes..."\r\n    # -----------------------------------\r\n    # these commands to kill these process from linux/wsl\r\n    # get process listening on:\r\n    # ps aux | grep \'[s]sh -i fed.pem\'\r\n    # Kill these at once-\r\n    # pkill -f "ssh -i fed.pem"\r\n    # -----------------------------\r\n    pkill -f "ssh -i fed.pem"\r\n    sleep 1  # Allow cleanup\r\n\r\n    if pgrep -f "ssh -i fed.pem" >/dev/null; then\r\n        echo "[ERROR] Failed to terminate all tunnels"\r\n        exit 1\r\n    else\r\n        echo "[SUCCESS] All tunnels closed"\r\n    exit 0\r\n    fi\r\n}\r\n\r\n# 1. Validate SSH key exists\r\nif [ ! -f "fed.pem" ]; then\r\n    echo "[ERROR] Missing SSH key: fed.pem"\r\n    exit 1\r\nfi\r\n\r\n# 2. Get target host with validation\r\nwhile true; do\r\n    read -p "Enter EC2 hostname (user@host): " REMOTE_HOST\r\n    if [ -n "$REMOTE_HOST" ]; then\r\n        break\r\n    else\r\n        echo "[ERROR] No host specified"\r\n    fi\r\ndone\r\n\r\n# 3. Establish SSH tunnels with connection verification\r\necho "[STATUS] Initializing SSH tunnels to $REMOTE_HOST..."\r\nssh -i fed.pem -N "${SSH_PORTS[@]}" "$REMOTE_HOST" &\r\nSSH_PID=$!\r\n\r\n# Verify tunnel establishment\r\necho "[STATUS] Verifying connection (10s timeout)..."\r\nCONNECTED=false\r\nfor _ in {1..10}; do\r\n    if pgrep -P $SSH_PID >/dev/null; then\r\n        CONNECTED=true\r\n        break\r\n    fi\r\n    sleep 1\r\ndone\r\n\r\nif ! $CONNECTED; then\r\n    echo "[ERROR] Failed to establish SSH connection"\r\n    cleanup\r\n    exit 1\r\nfi\r\n\r\necho "[SUCCESS] Tunnels active: http://localhost:[PORT]"\r\necho "[CONTROL] Type \'stop\' to terminate or \'status\' to check tunnels"\r\n\r\n# 4. Main control loop\r\nwhile true; do\r\n    read -p "Command: " CMD\r\n    case "${CMD,,}" in\r\n        stop)\r\n            cleanup\r\n            ;;\r\n        status)\r\n            if pgrep -f "ssh -i fed.pem" >/dev/null; then\r\n                echo "[STATUS] Tunnels active"\r\n            else\r\n                echo "[STATUS] Tunnels inactive"\r\n            fi\r\n            ;;\r\n        *)\r\n            echo "[HELP] Valid commands: stop, status"\r\n            ;;\r\n    esac\r\ndone\r\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"To do any modification, take a backup.. Then see the change by modifying things one by one and testing otherwise it\u2019ll be complete mess"}),"\n",(0,t.jsx)(n.li,{children:"configure spark and yarn resources based on your system resources"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);